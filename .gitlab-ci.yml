stages:
  - ssh
  - build
  - deploy

.ssh-setyings-up: &ssh_setup
  stage: ssh
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -t rsa $VM_CLICKHOUSE_PORT > ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 644 ~/.ssh/known_hosts
    - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"

build:
  stage: build
  script:
    - docker build --no-cache -t ${CI_REGISTRY_IMAGE}:latest -t ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA .
    - docker push ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA > /dev/null
    - docker push ${CI_REGISTRY_IMAGE}:latest > /dev/null
  tags:
    - airflow, dp

production:
  <<: *ssh_setup
  stage: deploy
  script:
    - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker pull ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA"
    - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "echo ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA > /home/$VM_CLICKHOUSE_USER/.prew_image"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "if docker ps -a | grep ${CI_REGISTRY_IMAGE}; then docker stop $(docker ps -a | grep ${CI_REGISTRY_IMAGE} | awk '{print $1}'); docker rm $(docker ps -a | grep ${CI_REGISTRY_IMAGE} | awk '{print $1}'); fi"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} || true"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker run -d -p 8080:8080 ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"

    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker stop $(docker ps -a | grep ${CI_REGISTRY_IMAGE} | awk '{print $1}')"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker images | grep ${CI_REGISTRY_IMAGE} | awk '{print $3}' | xargs docker rmi"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker stop $AIRFLOW_CONTAINER_NAME"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker rm $AIRFLOW_CONTAINER_NAME"
    - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker run -d --name $AIRFLOW_CONTAINER_NAME -p 8080:8080 ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "echo ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA | cat - /home/$VM_CLICKHOUSE_USER/.pull_history > /home/$VM_CLICKHOUSE_USER/.tmp && mv /home/$VM_CLICKHOUSE_USER/.tmp /home/$VM_CLICKHOUSE_USER/.pull_history"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "echo ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA > /home/$VM_CLICKHOUSE_USER/.current_image"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker images | grep ${CI_REGISTRY_IMAGE} | awk '{print $3}' | xargs docker rmi"
    # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "cat /home/$VM_CLICKHOUSE_USER/.prew_image"
  only:
    - test
  dependencies:
    - build
  tags:
    - airflow, dp

# deploy test:
#   stage: deploy test
#   script:
#     # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker stop $AIRFLOW_CONTAINER_NAME"
#     # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker rm $AIRFLOW_CONTAINER_NAME"
#     - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker run -d --name $AIRFLOW_CONTAINER_NAME -p 8080:8080 ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA"
#   only:
#     - test
#   dependencies:
#     - test

# deploy production:
#   stage: deploy production
#   script:
#     # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker stop $AIRFLOW_CONTAINER_NAME"
#     # - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker rm $AIRFLOW_CONTAINER_NAME"
#     - ssh $VM_CLICKHOUSE_USER@$VM_CLICKHOUSE_PORT "docker run -d --name $AIRFLOW_CONTAINER_NAME -p 8080:8080 ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA"
#   only:
#     - test
#   dependencies:
#     - deploy test
 # rules:
 #   - if: $CI_COMMIT_TAG =~ /^devops/
 #     when: never
